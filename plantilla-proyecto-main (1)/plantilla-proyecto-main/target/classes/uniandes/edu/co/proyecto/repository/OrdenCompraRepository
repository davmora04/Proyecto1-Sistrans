package uniandes.edu.co.proyecto.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.transaction.annotation.Transactional;

import uniandes.edu.co.proyecto.model.OrdenCompra;

public interface OrdenCompraRepository extends JpaRepository<OrdenCompra, Integer> {

    // Insertar una nueva ORDEN_COMPRA
    @Modifying
    @Transactional
    @Query(value = "INSERT INTO ordencompra (id_compra, cantidad, precioacordado, fechaespera, fecha_creacion, estado, id_sucursal, id_producto, id_proveedor) " +
                   "VALUES (:idCompra, :cantidad, :precioAcordado, :fechaEspera, :fechaCreacion, :estado, :idSucursal, :idProducto, :idProveedor)", nativeQuery = true)
    void insertarOrdenCompra(@Param("idCompra") Integer idCompra, 
                             @Param("cantidad") Integer cantidad, 
                             @Param("precioAcordado") Double precioAcordado, 
                             @Param("fechaEspera") String fechaEspera, 
                             @Param("fechaCreacion") String fechaCreacion, 
                             @Param("estado") String estado, 
                             @Param("idSucursal") Integer idSucursal, 
                             @Param("idProducto") Integer idProducto, 
                             @Param("idProveedor") Integer idProveedor);

    // Actualizar el estado de la orden de compra a "anulada" solo si est√° en estado "vigente"
    @Modifying
    @Transactional
    @Query(value = "UPDATE ordencompra SET estado = 'anulada' WHERE id_compra = :idCompra AND estado = 'vigente'", nativeQuery = true)
    int anularOrdenCompra(@Param("idCompra") Integer idCompra);
}
